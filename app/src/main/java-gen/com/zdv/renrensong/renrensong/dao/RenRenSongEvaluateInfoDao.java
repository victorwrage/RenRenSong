package com.zdv.renrensong.renrensong.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zdv.renrensong.renrensong.RenRenSongEvaluateInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REN_REN_SONG_EVALUATE_INFO".
*/
public class RenRenSongEvaluateInfoDao extends AbstractDao<RenRenSongEvaluateInfo, Long> {

    public static final String TABLENAME = "REN_REN_SONG_EVALUATE_INFO";

    /**
     * Properties of entity RenRenSongEvaluateInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Order_id = new Property(1, String.class, "order_id", false, "ORDER_ID");
        public final static Property Rating_content = new Property(2, String.class, "rating_content", false, "RATING_CONTENT");
        public final static Property Level = new Property(3, String.class, "level", false, "LEVEL");
        public final static Property R_time = new Property(4, String.class, "r_time", false, "R_TIME");
        public final static Property User_id = new Property(5, String.class, "user_id", false, "USER_ID");
        public final static Property Key_word = new Property(6, String.class, "key_word", false, "KEY_WORD");
        public final static Property Rating_person = new Property(7, String.class, "rating_person", false, "RATING_PERSON");
        public final static Property Is_end = new Property(8, String.class, "is_end", false, "IS_END");
        public final static Property Is_read = new Property(9, Boolean.class, "is_read", false, "IS_READ");
        public final static Property Evaluate_owner = new Property(10, String.class, "evaluate_owner", false, "EVALUATE_OWNER");
    };


    public RenRenSongEvaluateInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RenRenSongEvaluateInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REN_REN_SONG_EVALUATE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_ID\" TEXT," + // 1: order_id
                "\"RATING_CONTENT\" TEXT," + // 2: rating_content
                "\"LEVEL\" TEXT," + // 3: level
                "\"R_TIME\" TEXT," + // 4: r_time
                "\"USER_ID\" TEXT," + // 5: user_id
                "\"KEY_WORD\" TEXT," + // 6: key_word
                "\"RATING_PERSON\" TEXT," + // 7: rating_person
                "\"IS_END\" TEXT," + // 8: is_end
                "\"IS_READ\" INTEGER," + // 9: is_read
                "\"EVALUATE_OWNER\" TEXT);"); // 10: evaluate_owner
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REN_REN_SONG_EVALUATE_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RenRenSongEvaluateInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(2, order_id);
        }
 
        String rating_content = entity.getRating_content();
        if (rating_content != null) {
            stmt.bindString(3, rating_content);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(4, level);
        }
 
        String r_time = entity.getR_time();
        if (r_time != null) {
            stmt.bindString(5, r_time);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(6, user_id);
        }
 
        String key_word = entity.getKey_word();
        if (key_word != null) {
            stmt.bindString(7, key_word);
        }
 
        String rating_person = entity.getRating_person();
        if (rating_person != null) {
            stmt.bindString(8, rating_person);
        }
 
        String is_end = entity.getIs_end();
        if (is_end != null) {
            stmt.bindString(9, is_end);
        }
 
        Boolean is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindLong(10, is_read ? 1L: 0L);
        }
 
        String evaluate_owner = entity.getEvaluate_owner();
        if (evaluate_owner != null) {
            stmt.bindString(11, evaluate_owner);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RenRenSongEvaluateInfo readEntity(Cursor cursor, int offset) {
        RenRenSongEvaluateInfo entity = new RenRenSongEvaluateInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // order_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rating_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // level
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // r_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // key_word
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rating_person
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // is_end
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // is_read
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // evaluate_owner
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RenRenSongEvaluateInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrder_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRating_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLevel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setR_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKey_word(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRating_person(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIs_end(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs_read(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setEvaluate_owner(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RenRenSongEvaluateInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RenRenSongEvaluateInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
